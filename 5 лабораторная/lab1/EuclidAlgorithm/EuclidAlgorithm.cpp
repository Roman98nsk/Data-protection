#include <stdio.h>
#include <stdlib.h>
#include <time.h>


#include "basicalgs.cpp"
// Для самопроверки: https://calc.by/math-calculators/nod-nok.html
// https://planetcalc.com/3298/
// http://e-maxx.ru/algo/export_extended_euclid_algorithm

// Идея: У нас есть два числа: a, b. У них есть какой-то НОД(назовем его N). Обычный алгоритм Евклида(описанный в части 1)
// находит только НОД. Обобщенный алгоритм находит ещё и коэффициенты x,y:
// x*a + y*b = N

// x - закрытый ключ
// y - открытый ключ

// Алгоритм:
// Часть 1:
// ===================================================================================
// 1. Большее число делим на меньшее.
// 2. Если делится без остатка, то меньшее число и есть НОД (следует выйти из цикла).
// 3. Если есть остаток, то большее число заменяем на остаток от деления.
// 4. Переходим к пункту 1.
// ===================================================================================
// Часть 2:
// Если кратко, то в части 1 мы рекурсивно шли вниз, в поисках НОД, то во второй
// мы поднимаемся вверх, преобразуя наше выражение к изначальному
// Наиболее наглядно вторая часть показана здесь: https://www.youtube.com/watch?v=6KmhCKxFWOs&ab_channel=JohnBowers


int main() {
    srand(time(NULL));
    long a = rand() % (RAND_MAX) + 1;
    long b = rand() % (RAND_MAX) + 1;
    long x = 0;
    long y = 0;
    long nod = gcd(a, b, &x, &y);
    printf("a=%ld\nb=%ld\nnod=%ld\nx=%ld\ny=%ld\n", a, b, nod, x, y);
    printf("res=%ld\n", a * x + b * y); // Проверяем, что результат сходится с НОД-ом
    return 0;
}